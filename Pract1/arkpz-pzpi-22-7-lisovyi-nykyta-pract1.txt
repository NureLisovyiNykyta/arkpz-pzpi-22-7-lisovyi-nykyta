Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Основні рекомендації написання коду 
для мови програмування С.»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							ст. викл. каф. ПІ         
Лісовий Н. А.                                                                    Сокорчук І. П.








2024
1 ОСНОВНІ РЕКОМЕНДАЦІЇ НАПИСАННЯ КОДУ НА МОВІ ПРОГРАМУВАННЯ С

1.1 Мета роботи 

Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування С, а також навчитися аналізувати та рефакторити код для покращення його якості.

1.2 Хід роботи 

1. Було обрано мову програмування С для дослідження правил написання коду та проаналізовано різні джерела;
2. Написано приклади коду для демонстрації певних правил написання;
3. Створено презентацію (див. дод. Б), в якій розглянуто такі ключові моменти:
- важливість правил оформлення коду;
- структура коду;
- форматування коду;
- конвекції іменування;
- принципи вибору імен;
- оголошення змінних;
- коментарі;
- документування коду з використанням Doxygen;
- автоматична перевірка стилю коду;
- статичний аналіз коду;
-  Test-Driven Development;
4.Зміст практичного заняття.
	Важливість правил оформлення коду
Правильно оформлений код – основа успішного командного проєкту та довготривалого життєвого циклу ПЗ.
1.Полегшує спільну роботу в команді.
2.Забезпечує єдині стандарти для всіх учасників проєкту.
3.Полегшує розуміння логіки та структури навіть новим учасникам команди.
4.Спрощує модифікацію та виправлення помилок.
5.Знижує ризик допущення синтаксичних та логічних помилок.
6.Зменшує час на рев’ю та рефакторинг, збільшуючи ефективність роботи.

Структура коду
Файли програми на С можна розділити заголовки (*.h), містять декларації функцій, структур, макросів і констант та файли реалізації (*.c). Вони містять реалізацію функцій, визначення змінних і логіку програми.
Порядок у файлах заголовках:
1.include guard - захист від повторних включеннь;
2.включення бібліотек;
3.константи та макроси;
4.декларації структур і типів;
5.прототипи функцій.
Порядок у файлах реалізації:
1.включення заголовків;
2.визначення глобальних змінних;
3.головна функція (якщо є);
4.реалізація функцій.
	
	/* --------------------- Структура коду ---------------------- */
/* Заголовок circle.h */
#ifndef CIRCLE_H
#define CIRCLE_H

/* Оголошення константи */
#define PI 3.14159

/* Оголошення структури */
typedef struct {
    double radius; // Радіус кола
} Circle;

/* Оголошення функції */
double calculate_area (Circle circle);

#endif

/* Реалізація circle.c */
#include "circle.h" // Підключення заголовного файлу

/* Реалізація функції */
double calculate_area(Circle circle) {
    return PI * circle.radius circle.radius;
}

Форматування коду
Конвенції іменування
1.Використовуйте snake_case для змінних і функцій.
2.Використовуйте CamelCase для назв структур і типів.
3.Константи повинні бути оголошені в UPPER_SNAKE_CASE.
Принципи вибору імен
1.Імена повинні бути зрозумілими та лаконічними. Уникайте абревіатур і скорочень, якщо вони не загальновідомі.
2.Уникайте магічних чисел. Замість цього використовуйте зрозумілі змінні чи константи для представлення значень.

/* -------------------- Форматування коду --------------------- */
// Правильний приклад форматування коду
void correct_formatting() {
    int x = 10; // Використовуємо один пробіл перед та після оператора 	присвоєння
    int y = 5; // Теж саме для іншого присвоєння
    
    // Використовуємо один пробіл перед і після арифметичних 	операторів
    if (x + y = 15) {
        printf("x + y is 15\n"); // Один пробіл після коми в списку 	параметрів
    }
}

// Неправильний приклад форматування коду
void incorrect_formatting() {
    int x=10; // Немає пробілу перед і після оператора присвоєння
    int y=5; // Немає пробілу перед і після оператора присвоєння

    // Немає пробілу перед і після арифметичного оператора
    if (x+y==15) {
        printf("x + y is 15\n"); // Немає пробілу після коми в списку 	параметрів
    }
}

Іменування коду
Рекомендації по оголошенню змінни
1.Групуйте локальні змінні за типами.
2.При оголошенні покажчиків, розміщуйте зірочку поруч з типом, а не з назвою змінної. Але при оголошенні кількох покажчиків можна вирівнювати зірочку з іменем змінної
3.Ви можете оголошувати нові змінні всередині наступного рівня відступу.
	
/* ---------------------- Іменування ----------------------- */
// Правильний приклад імееування

#define PI 3.14159 // Використано UPPER_SNAKE_CASE для констант

typedef struct {
    double radius; // Зрозумілі імена змінних (snake_case)
}
Circle; // Використано CamelCase для структур

// Коректна назва функції (snake_case)
double calculate_circle_area (Circle circle) {
    return PI * circle.radius * circle.radius;
}

// Неправильний приклад імееування
typedef struct {
    double R; // Некоректна та незрозуміла назва змінної
} circle_data; // Неправильно: не СamelCase для структур

// Неправильно: використано скорочення та CamelCase для функції
double calcArea (circle_data c) { // незрозуміле передана змінна
    return 3.14 * c.r * c.r; // Неправильно: використано магічне число
}

// Рекомендації по оголошенню змінних
void declaration_of_variables() {
    // Групування змінних за типами
    int i, j, k;
    double x, y;
    char *str1, *str2; // Оголошення покажчиків з вирівнюванням зірочки

    // Правильне використання покажчиків
    int* ptr;       // Зірочка поруч із типом
    char *p, *n;    // Вирівнювання зірочки з іменами змінних

    // Неправильний приклад: змінна оголошена після виконавчої 	команди
    printf("Hello, World!\n");
    int lateVariable;

    // Правильний спосіб: оголошення змінних в наступному рівні 	відступу
    if (x > 0) {
        int innerVariable = 10;
        printf("Inner variable: %d\n", innerVariable);
    }
}

Коментарі
Коментарі використовуються для пояснення коду та документування, допомагаючи зрозуміти логіку програми, що полегшує її підтримку та налагодження. Уникайте очевидних та надлишкових коментаріів.
Многострочні коментарі містять кілька рядків, використовують символи /* для початку та */ для закінчення. Використовуйте пробіл та зірочку для кожного рядка. Підходять для пояснення великих блоків коду або загальних описів.
Однорядкові коментарі, починаються з подвійного слешу // і триває до кінця рядка. Використовуються для коротких пояснень.

/* ----------------------- Коментарі ------------------------ */
/*
 * Приклад коректного мультистрічкового коментаря
 * написаний у 2 рядка
*/
/* Приклад мультистрічкового коментаря, один рядок"*/

// Приклад однорядкового коментаря.
int example 1; // Приклад однорядкового коментаря

Документування коду
Документування коду забезпечує зрозумілість логіки програми для розробників, що полегшує підтримку та розвиток проекту. Для цього у С потрібно використовувати Doxygen. Doxygen — це інструмент для автоматичного генерування документації з коментарів у коді. Він підтримує створення HTML, PDF, LaTeX тощо, базуючись на спеціальних форматах коментарів у вихідному коді.
1.Використовуйте /** для блоків коментарів, які підтримує Doxygen.
2.Завжди використовуйте \ для тегів (не @).
3.Коментарі повинні бути відступлені на 5 табуляцій (20 пробілів) від початку рядка.
4.Документуйте кожну функцію та структуру і всі її елементи у вихідному файлі.
5.Уникайте надлишкових коментарів, зосередьтеся на поясненні логіки.
6.Вирівнюйте початок коментарів в одну колонку.
Структура документації
1.\brief — Опис функції або об’єкта.
2.\param[in] / \param[out] — Роль кожного параметра функції (вхід/вихід).
3.\return — Описує тип і значення, що повертається.
4.Використовуйте двокрапку : для розділення імені параметра та його опису.
5.\note та \warning - Для додаткових пояснень і застережень.
6.\hideinitializer - Повинна бути включена до документації для макросів.
7.\ref - Для функцій, що повертають члени перерахування
	
/* --------------------- Документування ---------------------- */
/**
 * \brief            Обчислює площу кола за заданим радіусом.
 * \param[in]        circle Структура, яка містить радіус кола.
 * \return           Площа кола.
 */
double calculate_circle_area(Circle circle) {
    return PI * circle.radius * circle.radius; // Площа кола (? * r^2)
}

/**
 * \brief            Оновлює радіус кола.
 * \param[in,out]    circle Структура кола, для оновлення радіусу.
 * \param[in]        new_radius Новий радіус.
 */
void update_radius(Circle* circle, double new_radius) {
    circle->radius = new_radius; // Оновлення радіусу
}

/**
 * \brief            Константа для значення ?
 * \note             Використовується для обчислення площі кола
 */
#define PI 3.14159

/**
 * \brief            Структура для представлення кола.
 * \param radius     Радіус кола
 */
typedef struct {
    double radius; /**< Радіус кола */
} Circle;

Інструменти для перевірки стилю коду
Clang-Format — це один з найбільш популярних інструментів для автоматичного форматування коду на C та інших мовах програмування. Clang-Format належить до набору інструментів Clang і дозволяє налаштовувати стилі коду відповідно до вимог проекту.
Основні особливості Clang-Format:
1.Гнучкі налаштування параметрів стилю через файл .clang-format
2.Інтеграція з IDE (Visual Studio, CLion та інші).
3.Автоматичне форматування коду за заданими правилами.
4.Інші інструменти, які допомагають перевіряти та підтримувати стиль коду на C: cpplint , Astyle, Uncrustify.
5.Інтеграція з Git Hooks для форматування коду перед комітом.
Інтеграція в CI/CD для автоматизування перевірки стилю коду на рівні серверів, використовуючи GitHub Actions, GitLab CI, Jenkins.

Статичний аналіз коду
Cppcheck — це найпопулярніший інструмент для статичного аналізу коду, який перевіряє програми на мові C/C++ на наявність потенційних помилок, проблем з продуктивністю та інших дефектів без виконання коду.
Основні особливості Cppcheck:
1.Налаштований на виявлення реальних помилок, а не простих попереджень.
2.Виявляє помилки, які не можна знайти компілятором.
3.Інші інструменти, для статичного аналізу коду на C: SonarQube, Splint, clang-tidy, Frama-C, oclint.
4.Git Hooks для автоматичного статичного аналізу коду перед комітом.
Інтеграція в CI/CD для автоматизування статичного аналізу коду на рівні серверів, використовуючи GitHub Actions, GitLab CI, Jenkins.
Test-Driven Development
Test-Driven Development (TDD) – це методологія розробки програмного забезпечення, в якій тестування є ключовою складовою процесу створення коду.
Основні етапи Test-Driven Development:
1.створення мінімального коду, який проходить ці тести;
2.створення автоматизованих тестів, які визначають вимоги до функціональності;
3.оптимізація коду та виконання рефакторингу для покращення структури.
До переваг використання Test-Driven Development можна віднести покращену якість коду, швидше виявлення помилок та легкість у рефакторингу.
Для впровадження Test-Driven Development використовуються інструменти для автоматизованого тестування, такі як Google Test, CMocka, CUnit, Check та Catch2.


1.3 Висновки

У ході роботи було детально розглянули основних рекомендацій щодо написання коду для мови програмування C для підвищення чистоту, зрозумілості та ефективністі програмного забезпечення.
Було визначено правильну структуру коду, єдине форматування, зрозуміле іменування, а також коментарі та документацію з викристанням Doxygen, що значно полегшують процес розробки та подальшого супроводу проектів. Розглянуті інструменти для автоматичної перевірки стилю коду, такі як Clang-Format, і статичний аналіз коду за допомогою Cppcheck дозволяють знаходити помилки та підтримувати високі стандарти якості та їх інтеграцію з Git Hooks і CI/CD. Також була розглянута така методологія розробки програмного забезпечення, як Test-Driven Development (TDD), визначено її основні етапи, переваги та інструменти.

Посилання на файл з кодом в GitHub репозиторії:
https://github.com/NureLisovyiNykyta/arkpz-pzpi-22-7-lisovyi-nykyta
Посилання на YouTube відео з презентацією:
…

ДОДАТОК А
Список використаних джерел 
1.C Coding Standard. URL: https://CodingStandard/  (date of access: 15.12.2024). 
2.C Coding Style and Convection: URL: https://cs.brown.edu/courses/ (date of access: 15.12.2024). 
3.C Coding Convection: URL: https://wikileaks.org/  (date of access: 15.12.2024). 
4.C Programming Language Coding Guidelines: 
URL: https://github.io/C_coding_guidelines/  (date of access: 15.12.2024). 
5.C style and coding rules: URL: https://github.com/c-code-style (date of access: 15.12.2024). 
6.Doxygen: URL: https://www.doxygen.nl/ (date of access: 15.12.2024). 
7.Clang Format Documentation: URL: https://docs/ClangFormat.html (date of access: 15.12.2024). 
8.CppCheck Documentation: URL: https://cppcheck.sourceforge.io/ (date of access: 15.12.2024). 

ДОДАТОК Б
Слайди презентації

Рисунок Б.1 –Титульний слайд презентації


Рисунок Б.2 – Слайд з описом мети та теми доповіді

Рисунок Б.3 – Слайд зі змістом презентації


Рисунок Б.4 – Слайд з вступом  

Рисунок Б.5 – Слайд з стуктурою коду
 

Рисунок Б.6 – Слайд з форматуванням коду

Рисунок Б.7 – Слайд з конвекціями іменування та 
принципами вибору імен


Рисунок Б.8 – Слайд з рекомендаціями щодо оголошення зміних

Рисунок Б.9 – Слайд з правилами коментування


Рисунок Б.10 – Слайд з документуванням коду

Рисунок Б.11 – Слайд з структурою документації


Рисунок Б.12 – Слайд з інструментами для перевірки стилю коду

Рисунок Б.13 – Слайд з статичним аналізом коду


Рисунок Б.14 – Слайд з Test-Driven Development

Рисунок Б.15 – Слайд з висновками


Рисунок Б.16 – Слайд з джерелами
