Харківський університет радіоелектроніки
Факультет комп'ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи номер 5 
з дисципліни
"Аналіз та рефакторинг коду"
на тему: "РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ 
ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"




Виконав ст. гр. ПЗПІ-22-7
Лісовий Нікіта Андрійович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
 




Харків 2024


1 МЕТА

Метою роботи є розгорнути програмну систему безпеки будинку з датчиками відкриття дверей та вікон.

2 ХІД РОБОТИ

4.1. Протягом виконання лабораторної роботи було розроблено програмну систему для контролю безпеки будинку. 
Загальний опис інженерних рішень:
а) серверна частина: 
1)мова програмування Python;
2)фреймворк Flask;
3)реляційна база даних Microsoft SQL Server;
4)SQLAlchemy для інтеграції Flask із базою даних.
5)REST API для взаємодії з клієнтами;
б) розумний пристрій:
1)мікроконтролер ESP32;
2)ультразвуковий датчик HC-SR04;
3)середовище розробки та емуляції: Wokwi;
4)спосіб зв'язку з сервером: HTTP через ngrok тунель;
в) розгортання системи:
1)Docker для контейнеризації додатків, що дозволяє ізолювати середовище виконання та уникнути проблем із залежностями;
2)Docker Compose - інструмент для автоматизованого управління кількома контейнерами, які взаємодіють між собою.
4.2. Для розгортання програмної системи було обрано технології Docker та Docker Compose, які забезпечують зручність, масштабованість і ізоляцію середовища. Docker є платформою для контейнеризації, яка дозволяє упаковувати додатки разом з усіма їхніми залежностями в окремі контейнери. Це забезпечує незалежність середовища виконання, виключаючи проблеми, пов’язані з конфліктами бібліотек або залежностей, і дозволяє легко переносити систему між різними хостами. 
Для автоматизації запуску й управління кількома контейнерами використовується Docker Compose. Це інструмент, який дозволяє визначати багатоконтейнерні програми за допомогою єдиного YAML-файлу (docker-compose.yml). У цьому файлі описується конфігурація всіх контейнерів, їхні залежності, мережі, змінні середовища та об’єми. 
У даній програмній системі Docker використовується для створення двох основних контейнерів: контейнера з веб-додатком на базі Flask і контейнера з реляційною базою даних Microsoft SQL Server. Контейнер Flask містить серверну логіку додатка, побудовану за допомогою Python, і ORM для роботи з базою даних. SQL Server запускається у власному контейнері, що забезпечує ізольоване середовище для збереження даних, яке ініціалізується за допомогою спеціально підготовленого SQL-скрипта.
Docker Compose автоматизує залежності між цими контейнерами. Наприклад, SQL Server запускається перед Flask-додатком, оскільки останній залежить від доступності бази даних. Також налаштовуються мережеві порти для взаємодії між контейнерами та з хостовою системою, що забезпечує простоту інтеграції та доступ до системи ззовні.
Код Docker та Docker Compose файлу наведені у Додатку А.

4.3 Для встановлення системи необхідно виконати дії що продемонстровані у відео, посилання на яке наведено у Додатку Б.

	Спочатку слід встановити Docker Desktop для Windows або macOS, або Docker Engine для Linux, скориставшись офіційним сайтом Docker. 
	Для розгортання системи потрібно клонувати репозиторій, що неведено у Додатку Б. 
Перед запуском слід створити конфігураційний файл .env встановити змінні середовища, які використовуються системою.
Для запуску системи виконайте команду docker-compose up --build. Ця команда побудує Docker-образи, якщо їх ще не існує, та запустить усі контейнери, описані в docker-compose.yml.
Після успішного запуску система буде доступна за адресою http://localhost:5000, зазначеним у конфігурації.
На комп'ютері користувача встановлено ngrok для створення тунелю.
У користувача повинен буди доступ до симулятора Wokwi для роботи з розумним пристроєм.
Через особливості роботи симулятора Wokwi, підключення до локальної мережі здійснюється через ngrok тунель. У реальному проекті передбачається пряме підключення пристрою через локальну Wi-Fi мережу.
Дле тестування додатку необхідно використати Postman.

4.4. Увесь вихідний код проєкту розміщений у репозиторії GitHub, а основні частини коду наведені в Додатку Б.


3 ВИСНОВКИ

У ході виконання лабораторної роботи було розроблено та успішно розгорнуто програмну систему для контролю безпеки будинку. Система складається з серверної частини, реалізованої за допомогою Python і Flask, реляційної бази даних Microsoft SQL Server та розумного пристрою.
Для забезпечення надійності та масштабованості було використано Docker і Docker Compose, що дозволяють ізолювати компоненти системи у вигляді контейнерів, спрощуючи процес розгортання та тестування. 



ДОДАТОК А
ПРОГРАМНИЙ КОД
Приклад коду файлу Dockerfile.
1.FROM python:3.10
2.LABEL authors="Nikita Lisovyi"
3.
4.WORKDIR /app
5.
6.RUN apt-get update && apt-get install -y \
7.    sudo \
8.    unixodbc-dev \
9.    curl \
10.    gnupg2 \
11.    lsb-release \
12.    apt-transport-https \
13.    && apt-get clean
14.
15.RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
16.
17.RUN curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-server.list
18.
19.RUN rm -f /etc/apt/sources.list.d/mssql-tools.list
20.
21.RUN apt-get remove -y libodbc2 libodbcinst2 unixodbc-common
22.
23.USER root
24.
25.ENV ACCEPT_EULA=Y
26.
27.RUN apt-get update && apt-get install -y msodbcsql17 mssql-tools
28.
29.RUN useradd -ms /bin/bash mssql
30.
31.COPY requirements.txt .
32.RUN pip install --no-cache-dir -r requirements.txt
33.
34.USER mssql
35.
36.COPY . .
37.
38.ENV FLASK_APP=run.py
39.ENV FLASK_ENV=development
40.
41.CMD ["flask", "run", "--host=0.0.0.0"]

Приклад коду файлу docker-compose.yml.
1.services:
2.  web:
3.    build: .
4.    ports:
5.      - "5000:5000"
6.    environment:
7.      - FLASK_ENV=development
8.      - DATABASE_URL=mssql+pyodbc://sa:SafeHomePassword1@mssql/SafeHome?driver=ODBC+Driver+17+for+SQL+Server
9.    env_file:
10.      - .env
11.    depends_on:
12.      - mssql
13.
14.  mssql:
15.    image: mcr.microsoft.com/mssql/server:2022-latest
16.    container_name: mssql_container
17.    ports:
18.      - "1433:1433"
19.    environment:
20.      SA_PASSWORD: "SafeHomePassword1"
21.      ACCEPT_EULA: "Y"
22.    volumes:
23.      - ./sql:/docker-entrypoint-initdb.d
24.    command: >
25.      /bin/bash -c "
26.      apt-get update && apt-get install -y \
27.      unixodbc-dev \
28.      mssql-tools \
29.      && /opt/mssql/bin/sqlservr & \
30.      sleep 30 && \
31.      /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P SafeHomePassword1 -i /docker-entrypoint-initdb.d/SafeHome_db_init.sql
32.      "
33.    user: root
34.    networks:
35.      - default
36.networks:
37.  default:
38.    driver: bridge


ДОДАТОК Б
ПОСИЛАННЯ 
Посилання на файл з кодом в GitHub репозиторії:
https://github.com/NureLisovyiNykyta/arkpz-pzpi-22-7-lisovyi-nykyta
	
Посилання на YouTube відео з презентацією:
	https://youtu.be/thB3ZISmk_0
	