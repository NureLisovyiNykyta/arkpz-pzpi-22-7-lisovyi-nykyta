Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з практичної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Методи рефакторингу коду 
програмного забезпечення»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							ст. викл. каф. ПІ         
Лісовий Н. А.                                                                    Сокорчук І. П.








2024
2 МЕТОДИ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕНЯ

2.1 Мета роботи 

Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості. 

2.2 Хід роботи 

1. Було обрано мову програмування С для дослідження правил написання коду та проаналізовано різні джерела;
2. Написано приклади коду для демонстрації певних правил написання;
3. Створено презентацію (див. дод. Б), в якій розглянуто такі ключові моменти:
- що таке рефакторинг коду та чому він важливий;
- що таке метод Replace Magic Number with Symbolic Constant;
- приклад застосування методу Replace Magic Number with 		 	Symbolic Constan;
- переваги  Replace Magic Number with Symbolic Constant;
- що таке метод Replace Method with Method Object;
- приклад застосування методу Replace Method with Method Object;
- переваги застосування  Replace Method with Method Object;
- що таке метод Replace Record with Data Class;
- приклад застосування методу Replace Record with Data Class;
- переваги застосування  Replace Record with Data Class;
- інструменти для рефакторингу коду.
4. Зміст практичного заняття.
	Що таке рефакторинг коду та чому він важливий?
Рефакторинг — це процес удосконалення структури існуючого коду без зміни його зовнішньої поведінки або функціональності. Рефакторинг є важливою частиною циклу розробки програмного забезпечення, оскільки дозволяє розробникам адаптувати код до нових вимог і підтримувати його якість у довгостроковій перспективі.
Мета рефакторингу полягає у покращенні якості програмного коду. Основні завдання включають:
1.підвищення читабельності коду, шляхом спрощення структури, видалення зайвих елементів і покращення зрозумілості логіки;
2.зменшення складності, шляхом усунення дублювання коду, спрощення алгоритмів і використання кращих практик;
3.полегшення підтримки та розширення, підготовка до майбутніх змін;
4.поліпшення продуктивності, оптимізація ресурсів і зменшення часу виконання.
	Було обрано три методи рефакторингу. На основі реальних прикладів із програмного коду показано, пераваги їх застосування.
Replace Magic Number with Symbolic Constant
Метод "Замініть магічне число на символічну константу" використовується для підвищення читабельності та підтримуваності коду. "Магічними числами" називають числові значення, які використовуються без пояснення їх значення чи призначення. Такі числа можуть ускладнювати розуміння коду, особливо якщо вони повторюються в декількох місцях. Цей метод передбачає створення символічної константи з описовою назвою замість використання числового літерала.

Проблеми коду до внесення змін.
Число 3.14 може бути незрозумілим для тих, хто читає код вперше. Без коментарів або додаткових пояснень неясно, що воно представляє. Внесення змін або повторне використання може викликати труднощі.

# Приклад до рефакторингу
def calculate_circle_area(radius):
    return 3.14 * radius * radius

Внесені зміни.
Числовий літерал 3.14 було замінено на символічну константу PI, яка має зрозумілу назву. Константа дозволяє легко змінювати її значення, адаптуючи код та забезпечуючи її перевикористання.

# Приклад після рефакторингу
PI = 3.14

def refactoreed_calculate_circle_area(radius):
    return PI * radius * radius

Переваги застосування методу
1.Спрощення змін - зміна значення константи потребує лише редагування в одному місці.
2.Зменшення помилок - легше зрозуміти значення числа і уникнути його неправильного використання.
3.Покращення читабельності - символічні константи з описовими назвами роблять код більш зрозумілим для розробників.
4.Узгодженість і перевикористання - однакові значення використовуються однаково в різних частинах коду.

Replace Method with Method Object
Метод "Замініть метод на об'єкт методу" використовується, коли метод у коді стає занадто великим або складним, що ускладнює його підтримку, розуміння та тестування. Цей метод передбачає створення окремого класу (об'єкта методу), де складна логіка переноситься з методу в клас, а змінні методу стають полями цього класу.
Цей підхід допомагає розбити складний метод на менші частини, які легше тестувати та повторно використовувати.

Проблеми коду до внесення змін.
1.Методи приймають однакові параметри a, b, c, які завжди потрібно передавати заново.
2.Складність підтримки, якщо потрібно внести зміни в логіку розрахунків, доведеться модифікувати декілька функцій.
3.Дані і логіка їх обробки розділені, що ускладнює розширення функціоналу.

# Приклад до рефакторингу
def calculate_triangle_area(a, b, c):
    s = (a + b + c) / 2
    return (s * (s - a) * (s - b) * (s - c)) ** 0.5

def calculate_triangle_perimeter(a, b, c):
    return a + b + c

Внесені зміни.
1.Створено клас Triangle, який інкапсулює всі дані та методи, пов’язані з трикутником.
2.Розрахунок площі та периметра переміщено до методів класу.
3.Дані трикутника (a, b, c) стали частиною об'єкта Triangle.
4.Методи взаємодіють через властивості, логіка обчислень стала компактнішою та більш зрозумілою.

# Приклад після рефакторингу
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def calculate_area(self):
        s = self.calculate_perimeter() / 2
        return (s * (s - self.a) * (s - self.b) * (s - self.c)) ** 0.5

    def calculate_perimeter(self):
        return self.a + self.b + self.c

triangle = Triangle(3, 4, 5)
perimeter = triangle.calculate_perimeter()
area = triangle.calculate_area()

Переваги застосування методу
1.Повторне використання - клас можна використовуватити у різних місцях коду.
2.Покращення тестування - логіку методу можна протестувати незалежно від інших частин коду.
3.Спрощення коду - складна логіка стає окремою сутністю, що полегшує розуміння та підтримку.
4.Інкапсуляція - дані і поведінка об'єднані в одному місці, що зменшує кількість зовнішніх залежностей.
5.Гнучкість - додаючи нові функції, не потрібно змінювати існуючий код, достатньо розширити клас.

Replace Record with Data Class
Метод "Замініть запис на клас даних" використовується для покращення структури коду, коли записи (наприклад, словники або кортежі) містять дані, які потрібно обробляти. Замість використання "неструктурованих" записів, таких як списки чи словники, створюється клас даних, який інкапсулює атрибути і може включати базову логіку роботи з ними. Це підвищує читабельність, підтримуваність і гнучкість коду.

Проблеми коду до внесення змін.
1.Використання словників (dict) робить код менш читабельним, оскільки немає чіткого визначення структури даних, що ускладнює їх обробку та інтеграцію логіки.
2.Зі збільшенням кількості атрибутів або змін до структури запису, всі частини коду, які працюють із цим записом, потребуватимуть оновлення.

# Приклад до рефакторингу
user = {
    "name": "John",
    "surname": "Doe",
    "email": "john.doe@example.com",
    "age": 30
}

def get_full_name(user):
    return f"{user['name']} {user['surname']}"

full_name = get_full_name(user)

Внесені зміни.
1.Створено клас User, який інкапсулює дані користувача у вигляді атрибутів із визначеними типами.
2.Використано @dataclass декоратор, який додає методи __init__, __repr__, та порівняння.
3.Створено метод, включає логіку для отримання повного імені, що робить код компактнішим і зрозумілішим.

# Приклад після рефакторингу
from dataclasses import dataclass

@dataclass
class User:
    name: str
    surname: str
    email: str
    age: int

    def get_full_name(self):
        return f"{self.name} {self.surname}"

user = User(name="John", surname="Doe", email="john.doe@example.com", age=30)
full_name = user.get_full_name()
Переваги застосування методу
1.Читабельність - код стає зрозумілішим завдяки використанню іменованих атрибутів.
2.Захист від помилок - типізація зменшує ризик помилок, наприклад, через неправильний доступ до даних.
3.Структурованість - клас даних чітко описує структуру об’єкта з його атрибутами та типами.
4.Розширюваність - легко додавання нових атрибути та методи, не порушуючи існуючий код.
5.Інтеграція з логікою - логіка, що стосується даних, може бути інтегрована у вигляді методів класу, спрощуючи роботу з об'єктами.

Інструменти для рефакторингу
Рефакторинг коду є невід'ємною частиною процесу розробки, яка спрямована на покращення якості програмного забезпечення. Щоб зробити цей процес швидким, ефективним і зручним, розробники використовують різноманітні інструменти. Усі інструменти рефакторингу можна поділити на кілька основних категорій залежно від їхніх функцій.

IDE з вбудованими функціями рефакторингу
Сучасні середовища розробки (IDE) мають вбудовані інструменти для рефакторингу, які спрощують виконання таких операцій, як перейменування змінних, виділення методів, автоматичне форматування коду тощо. Це забезпечує легкий доступ до рефакторингу без потреби використовувати додаткове програмне забезпечення. До таких інструментів можна віднести PyCharm (Python), Visual Studio (C#, C++, .NET та інші), IntelliJ IDEA (Java, Kotlin), Eclipse (Java).


Лінтери та аналізатори коду
Ці інструменти автоматично виправляють форматування коду, роблячи його більш читабельним та однорідним. Вони допомагають підтримувати чистоту коду, організовуючи його структуру та усуваючи зайві або некоректні пробіли, коментарі, імпорти тощо. До лінтерів можна віднести ESLint (JavaScript, TypeScript), Pylint (Python), а до статичних аналізаторів - Rubocop, СppCheck та SonarQube.

Спеціалізовані інструменти для рефакторингу
Ці інструменти забезпечують більш складні й автоматизовані функції рефакторингу, особливо для великих кодових баз або комплексних проєктів. Вони дозволяють оптимізувати структуру коду та полегшують виконання частих завдань. До таких інструментів можна віднести Refactoring.guru (загальне навчання та шаблони), Resharper (C#, Visual Studio), CodeRush (C#, Visual Studio), PHPStorm (PHP).

Інструменти для автоматизації форматування та організації коду
Ці інструменти автоматично виправляють форматування коду, роблячи його більш читабельним та однорідним. Вони допомагають підтримувати чистоту коду, організовуючи його структуру та усуваючи зайві або некоректні пробіли, коментарі, імпорти тощо. До таких інструментів можна віднести Prettier (JavaScript, TypeScript), Black (Python), clang-format (C, C++), PHP-CS-Fixer (PHP).



2.3 Висновки

У ході роботи було досліджено значення та важливість рефакторингу коду як ключового етапу в процесі розробки програмного забезпечення. Він підвищує якість коду, його читабельність, продуктивність та підтримуваність.
Були розглянуті та наведені приклади застосування трьох методів рефакторингу: Replace Magic Number with Symbolic Constant, Replace Method with Method Object, Replace Record with Data Class.
Також було розглянуто інструменти, які спрощують процес рефакторингу, зокрема інтегровані засоби IDE, лінтери, статичні аналізатори та спеціалізовані платформи. Використання цих інструментів допомагає автоматизувати процес рефакторингу, скоротити час, витрачений на виконання повторюваних завдань, і зосередитись на складних аспектах розробки.

Посилання на файл з кодом в GitHub репозиторії:
https://github.com/NureLisovyiNykyta/arkpz-pzpi-22-7-lisovyi-nykyta
Посилання на YouTube відео з презентацією:
…

ДОДАТОК А
Список використаних джерел 
1.Мартін Фаулер. "Refactoring: Improving the Design of Existing Code". – Pearson Education, 2018.  (date of access: 20.12.2024). 
2.Офіційна документація Python: 
URL: https://docs.python.org/uk/3/  (date of access: 20.12.2024). 
3.Офіційна документація PyCharm: 
URL: https://www.jetbrains.com/help/pycharm/getting-started.html  (date of access: 20.12.2024). 
4.Офіційна документація Pylint: 
URL: https://pylint.readthedocs.io/en/stable/ (date of access: 20.12.2024). 
5.Офіційна документація Black : 
URL: https://black.readthedocs.io/en/stable/ (date of access: 20.12.2024). 
6.Офіційний сайт Refactoring.Guru: 
URL: https://refactoring.guru/refactoring (date of access: 20.12.2024). 

ДОДАТОК Б
Слайди презентації

Рисунок Б.1 –Титульний слайд презентації


Рисунок Б.2 – Слайд з описом мети та теми доповіді

Рисунок Б.3 – Слайд зі змістом презентації


Рисунок Б.4 – Слайд з вступом  

Рисунок Б.5 – Слайд зі змістом вступа
 

Рисунок Б.6 – Слайд з методами рефакторингу

Рисунок Б.7 – Слайд з методом Replace Magic Number with Symbolic Constant


Рисунок Б.8 – Слайд з прикладом коду до і після використання 
методу рефакторингу

Рисунок Б.9 – Слайд з перевагами застосуванням методу


Рисунок Б.10 – Слайд з методом Replace Method with Method Object

Рисунок Б.11 – Слайд з прикладом коду до використання 
методу рефакторингу 


Рисунок Б.12 – Слайд з прикладом коду після використання 
методу рефакторингу 


Рисунок Б.13 – Слайд з перевагами застосуванням методу


Рисунок Б.14 – Слайд з методом Replace Record with Data Class


Рисунок Б.15 – Слайд з прикладом коду до використання 
методу рефакторингу 


Рисунок Б.16 – Слайд з прикладом коду після використання 
методу рефакторингу 

Рисунок Б.17 – Слайд з перевагами застосуванням методу


Рисунок Б.18 – Слайд з інструментами для рефакторингу

Рисунок Б.19 – Слайд з інструментами для рефакторингу


Рисунок Б.20 – Слайд з інструментами для рефакторингу


Рисунок Б.21 – Слайд з інструментами для рефакторингу


Рисунок Б.22 – Слайд з висновками


Рисунок Б.23 – Слайд зі вмістом висновків


Рисунок Б.24 – Слайд із джерелами
